// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package model

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type IDL struct {
	Id                  int64        `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	IdlRepositoryId     int64        `thrift:"idl_repository_id,2" frugal:"2,default,i64" json:"idl_repository_id"`
	ServiceRepositoryId int64        `thrift:"service_repository_id,3" frugal:"3,default,i64" json:"service_repository_id"`
	MainIdlPath         string       `thrift:"main_idl_path,4" frugal:"4,default,string" json:"main_idl_path"`
	CommitHash          string       `thrift:"commit_hash,5" frugal:"5,default,string" json:"commit_hash"`
	ImportIdls          []*ImportIDL `thrift:"import_idls,6" frugal:"6,default,list<ImportIDL>" json:"import_idls"`
	ServiceName         string       `thrift:"service_name,7" frugal:"7,default,string" json:"service_name"`
	LastSyncTime        string       `thrift:"last_sync_time,8" frugal:"8,default,string" json:"last_sync_time"`
	TemplateId          int64        `thrift:"template_id,9" frugal:"9,default,i64" json:"template_id"`
	Status              int32        `thrift:"status,10" frugal:"10,default,i32" json:"status"`
	IsDeleted           bool         `thrift:"is_deleted,11" frugal:"11,default,bool" json:"is_deleted"`
	CreateTime          string       `thrift:"create_time,12" frugal:"12,default,string" json:"create_time"`
	UpdateTime          string       `thrift:"update_time,13" frugal:"13,default,string" json:"update_time"`
}

func NewIDL() *IDL {
	return &IDL{}
}

func (p *IDL) InitDefault() {
	*p = IDL{}
}

func (p *IDL) GetId() (v int64) {
	return p.Id
}

func (p *IDL) GetIdlRepositoryId() (v int64) {
	return p.IdlRepositoryId
}

func (p *IDL) GetServiceRepositoryId() (v int64) {
	return p.ServiceRepositoryId
}

func (p *IDL) GetMainIdlPath() (v string) {
	return p.MainIdlPath
}

func (p *IDL) GetCommitHash() (v string) {
	return p.CommitHash
}

func (p *IDL) GetImportIdls() (v []*ImportIDL) {
	return p.ImportIdls
}

func (p *IDL) GetServiceName() (v string) {
	return p.ServiceName
}

func (p *IDL) GetLastSyncTime() (v string) {
	return p.LastSyncTime
}

func (p *IDL) GetTemplateId() (v int64) {
	return p.TemplateId
}

func (p *IDL) GetStatus() (v int32) {
	return p.Status
}

func (p *IDL) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *IDL) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *IDL) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *IDL) SetId(val int64) {
	p.Id = val
}
func (p *IDL) SetIdlRepositoryId(val int64) {
	p.IdlRepositoryId = val
}
func (p *IDL) SetServiceRepositoryId(val int64) {
	p.ServiceRepositoryId = val
}
func (p *IDL) SetMainIdlPath(val string) {
	p.MainIdlPath = val
}
func (p *IDL) SetCommitHash(val string) {
	p.CommitHash = val
}
func (p *IDL) SetImportIdls(val []*ImportIDL) {
	p.ImportIdls = val
}
func (p *IDL) SetServiceName(val string) {
	p.ServiceName = val
}
func (p *IDL) SetLastSyncTime(val string) {
	p.LastSyncTime = val
}
func (p *IDL) SetTemplateId(val int64) {
	p.TemplateId = val
}
func (p *IDL) SetStatus(val int32) {
	p.Status = val
}
func (p *IDL) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *IDL) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *IDL) SetUpdateTime(val string) {
	p.UpdateTime = val
}

var fieldIDToName_IDL = map[int16]string{
	1:  "id",
	2:  "idl_repository_id",
	3:  "service_repository_id",
	4:  "main_idl_path",
	5:  "commit_hash",
	6:  "import_idls",
	7:  "service_name",
	8:  "last_sync_time",
	9:  "template_id",
	10: "status",
	11: "is_deleted",
	12: "create_time",
	13: "update_time",
}

func (p *IDL) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IDL[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IDL) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *IDL) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.IdlRepositoryId = v
	}
	return nil
}

func (p *IDL) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ServiceRepositoryId = v
	}
	return nil
}

func (p *IDL) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MainIdlPath = v
	}
	return nil
}

func (p *IDL) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CommitHash = v
	}
	return nil
}

func (p *IDL) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImportIdls = make([]*ImportIDL, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewImportIDL()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ImportIdls = append(p.ImportIdls, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *IDL) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *IDL) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastSyncTime = v
	}
	return nil
}

func (p *IDL) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TemplateId = v
	}
	return nil
}

func (p *IDL) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *IDL) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsDeleted = v
	}
	return nil
}

func (p *IDL) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *IDL) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *IDL) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IDL"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IDL) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IDL) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("idl_repository_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IdlRepositoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *IDL) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_repository_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ServiceRepositoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *IDL) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("main_idl_path", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MainIdlPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *IDL) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("commit_hash", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CommitHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *IDL) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("import_idls", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ImportIdls)); err != nil {
		return err
	}
	for _, v := range p.ImportIdls {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *IDL) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_name", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *IDL) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_sync_time", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastSyncTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *IDL) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("template_id", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TemplateId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *IDL) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *IDL) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_deleted", thrift.BOOL, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsDeleted); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *IDL) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("create_time", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *IDL) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("update_time", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *IDL) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IDL(%+v)", *p)
}

func (p *IDL) DeepEqual(ano *IDL) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.IdlRepositoryId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ServiceRepositoryId) {
		return false
	}
	if !p.Field4DeepEqual(ano.MainIdlPath) {
		return false
	}
	if !p.Field5DeepEqual(ano.CommitHash) {
		return false
	}
	if !p.Field6DeepEqual(ano.ImportIdls) {
		return false
	}
	if !p.Field7DeepEqual(ano.ServiceName) {
		return false
	}
	if !p.Field8DeepEqual(ano.LastSyncTime) {
		return false
	}
	if !p.Field9DeepEqual(ano.TemplateId) {
		return false
	}
	if !p.Field10DeepEqual(ano.Status) {
		return false
	}
	if !p.Field11DeepEqual(ano.IsDeleted) {
		return false
	}
	if !p.Field12DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field13DeepEqual(ano.UpdateTime) {
		return false
	}
	return true
}

func (p *IDL) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *IDL) Field2DeepEqual(src int64) bool {

	if p.IdlRepositoryId != src {
		return false
	}
	return true
}
func (p *IDL) Field3DeepEqual(src int64) bool {

	if p.ServiceRepositoryId != src {
		return false
	}
	return true
}
func (p *IDL) Field4DeepEqual(src string) bool {

	if strings.Compare(p.MainIdlPath, src) != 0 {
		return false
	}
	return true
}
func (p *IDL) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CommitHash, src) != 0 {
		return false
	}
	return true
}
func (p *IDL) Field6DeepEqual(src []*ImportIDL) bool {

	if len(p.ImportIdls) != len(src) {
		return false
	}
	for i, v := range p.ImportIdls {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *IDL) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ServiceName, src) != 0 {
		return false
	}
	return true
}
func (p *IDL) Field8DeepEqual(src string) bool {

	if strings.Compare(p.LastSyncTime, src) != 0 {
		return false
	}
	return true
}
func (p *IDL) Field9DeepEqual(src int64) bool {

	if p.TemplateId != src {
		return false
	}
	return true
}
func (p *IDL) Field10DeepEqual(src int32) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *IDL) Field11DeepEqual(src bool) bool {

	if p.IsDeleted != src {
		return false
	}
	return true
}
func (p *IDL) Field12DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *IDL) Field13DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}

type ImportIDL struct {
	IdlPath    string `thrift:"idl_path,1" frugal:"1,default,string" json:"idl_path"`
	CommitHash string `thrift:"commit_hash,2" frugal:"2,default,string" json:"commit_hash"`
}

func NewImportIDL() *ImportIDL {
	return &ImportIDL{}
}

func (p *ImportIDL) InitDefault() {
	*p = ImportIDL{}
}

func (p *ImportIDL) GetIdlPath() (v string) {
	return p.IdlPath
}

func (p *ImportIDL) GetCommitHash() (v string) {
	return p.CommitHash
}
func (p *ImportIDL) SetIdlPath(val string) {
	p.IdlPath = val
}
func (p *ImportIDL) SetCommitHash(val string) {
	p.CommitHash = val
}

var fieldIDToName_ImportIDL = map[int16]string{
	1: "idl_path",
	2: "commit_hash",
}

func (p *ImportIDL) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportIDL[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportIDL) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdlPath = v
	}
	return nil
}

func (p *ImportIDL) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CommitHash = v
	}
	return nil
}

func (p *ImportIDL) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportIDL"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportIDL) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("idl_path", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdlPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ImportIDL) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("commit_hash", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CommitHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ImportIDL) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportIDL(%+v)", *p)
}

func (p *ImportIDL) DeepEqual(ano *ImportIDL) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IdlPath) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommitHash) {
		return false
	}
	return true
}

func (p *ImportIDL) Field1DeepEqual(src string) bool {

	if strings.Compare(p.IdlPath, src) != 0 {
		return false
	}
	return true
}
func (p *ImportIDL) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CommitHash, src) != 0 {
		return false
	}
	return true
}

type IDLWithInfo struct {
	Id                  int64        `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	IdlRepositoryId     int64        `thrift:"idl_repository_id,2" frugal:"2,default,i64" json:"idl_repository_id"`
	IdlRepository       *Repository  `thrift:"idl_repository,3" frugal:"3,default,Repository" json:"idl_repository"`
	ServiceRepositoryId int64        `thrift:"service_repository_id,4" frugal:"4,default,i64" json:"service_repository_id"`
	ServiceRepository   *Repository  `thrift:"service_repository,5" frugal:"5,default,Repository" json:"service_repository"`
	MainIdlPath         string       `thrift:"main_idl_path,6" frugal:"6,default,string" json:"main_idl_path"`
	CommitHash          string       `thrift:"commit_hash,7" frugal:"7,default,string" json:"commit_hash"`
	ImportIdls          []*ImportIDL `thrift:"import_idls,8" frugal:"8,default,list<ImportIDL>" json:"import_idls"`
	ServiceName         string       `thrift:"service_name,9" frugal:"9,default,string" json:"service_name"`
	TemplateId          int64        `thrift:"template_id,10" frugal:"10,default,i64" json:"template_id"`
	Template            *Template    `thrift:"template,11" frugal:"11,default,Template" json:"template"`
	Status              int32        `thrift:"status,12" frugal:"12,default,i32" json:"status"`
	LastSyncTime        string       `thrift:"last_sync_time,13" frugal:"13,default,string" json:"last_sync_time"`
	IsDeleted           bool         `thrift:"is_deleted,14" frugal:"14,default,bool" json:"is_deleted"`
	CreateTime          string       `thrift:"create_time,15" frugal:"15,default,string" json:"create_time"`
	UpdateTime          string       `thrift:"update_time,16" frugal:"16,default,string" json:"update_time"`
}

func NewIDLWithInfo() *IDLWithInfo {
	return &IDLWithInfo{}
}

func (p *IDLWithInfo) InitDefault() {
	*p = IDLWithInfo{}
}

func (p *IDLWithInfo) GetId() (v int64) {
	return p.Id
}

func (p *IDLWithInfo) GetIdlRepositoryId() (v int64) {
	return p.IdlRepositoryId
}

var IDLWithInfo_IdlRepository_DEFAULT *Repository

func (p *IDLWithInfo) GetIdlRepository() (v *Repository) {
	if !p.IsSetIdlRepository() {
		return IDLWithInfo_IdlRepository_DEFAULT
	}
	return p.IdlRepository
}

func (p *IDLWithInfo) GetServiceRepositoryId() (v int64) {
	return p.ServiceRepositoryId
}

var IDLWithInfo_ServiceRepository_DEFAULT *Repository

func (p *IDLWithInfo) GetServiceRepository() (v *Repository) {
	if !p.IsSetServiceRepository() {
		return IDLWithInfo_ServiceRepository_DEFAULT
	}
	return p.ServiceRepository
}

func (p *IDLWithInfo) GetMainIdlPath() (v string) {
	return p.MainIdlPath
}

func (p *IDLWithInfo) GetCommitHash() (v string) {
	return p.CommitHash
}

func (p *IDLWithInfo) GetImportIdls() (v []*ImportIDL) {
	return p.ImportIdls
}

func (p *IDLWithInfo) GetServiceName() (v string) {
	return p.ServiceName
}

func (p *IDLWithInfo) GetTemplateId() (v int64) {
	return p.TemplateId
}

var IDLWithInfo_Template_DEFAULT *Template

func (p *IDLWithInfo) GetTemplate() (v *Template) {
	if !p.IsSetTemplate() {
		return IDLWithInfo_Template_DEFAULT
	}
	return p.Template
}

func (p *IDLWithInfo) GetStatus() (v int32) {
	return p.Status
}

func (p *IDLWithInfo) GetLastSyncTime() (v string) {
	return p.LastSyncTime
}

func (p *IDLWithInfo) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *IDLWithInfo) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *IDLWithInfo) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *IDLWithInfo) SetId(val int64) {
	p.Id = val
}
func (p *IDLWithInfo) SetIdlRepositoryId(val int64) {
	p.IdlRepositoryId = val
}
func (p *IDLWithInfo) SetIdlRepository(val *Repository) {
	p.IdlRepository = val
}
func (p *IDLWithInfo) SetServiceRepositoryId(val int64) {
	p.ServiceRepositoryId = val
}
func (p *IDLWithInfo) SetServiceRepository(val *Repository) {
	p.ServiceRepository = val
}
func (p *IDLWithInfo) SetMainIdlPath(val string) {
	p.MainIdlPath = val
}
func (p *IDLWithInfo) SetCommitHash(val string) {
	p.CommitHash = val
}
func (p *IDLWithInfo) SetImportIdls(val []*ImportIDL) {
	p.ImportIdls = val
}
func (p *IDLWithInfo) SetServiceName(val string) {
	p.ServiceName = val
}
func (p *IDLWithInfo) SetTemplateId(val int64) {
	p.TemplateId = val
}
func (p *IDLWithInfo) SetTemplate(val *Template) {
	p.Template = val
}
func (p *IDLWithInfo) SetStatus(val int32) {
	p.Status = val
}
func (p *IDLWithInfo) SetLastSyncTime(val string) {
	p.LastSyncTime = val
}
func (p *IDLWithInfo) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *IDLWithInfo) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *IDLWithInfo) SetUpdateTime(val string) {
	p.UpdateTime = val
}

var fieldIDToName_IDLWithInfo = map[int16]string{
	1:  "id",
	2:  "idl_repository_id",
	3:  "idl_repository",
	4:  "service_repository_id",
	5:  "service_repository",
	6:  "main_idl_path",
	7:  "commit_hash",
	8:  "import_idls",
	9:  "service_name",
	10: "template_id",
	11: "template",
	12: "status",
	13: "last_sync_time",
	14: "is_deleted",
	15: "create_time",
	16: "update_time",
}

func (p *IDLWithInfo) IsSetIdlRepository() bool {
	return p.IdlRepository != nil
}

func (p *IDLWithInfo) IsSetServiceRepository() bool {
	return p.ServiceRepository != nil
}

func (p *IDLWithInfo) IsSetTemplate() bool {
	return p.Template != nil
}

func (p *IDLWithInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IDLWithInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IDLWithInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.IdlRepositoryId = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField3(iprot thrift.TProtocol) error {
	p.IdlRepository = NewRepository()
	if err := p.IdlRepository.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *IDLWithInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ServiceRepositoryId = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField5(iprot thrift.TProtocol) error {
	p.ServiceRepository = NewRepository()
	if err := p.ServiceRepository.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *IDLWithInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MainIdlPath = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CommitHash = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImportIdls = make([]*ImportIDL, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewImportIDL()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ImportIdls = append(p.ImportIdls, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *IDLWithInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TemplateId = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField11(iprot thrift.TProtocol) error {
	p.Template = NewTemplate()
	if err := p.Template.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *IDLWithInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastSyncTime = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsDeleted = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *IDLWithInfo) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *IDLWithInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IDLWithInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IDLWithInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IDLWithInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("idl_repository_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IdlRepositoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *IDLWithInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("idl_repository", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.IdlRepository.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *IDLWithInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_repository_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ServiceRepositoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *IDLWithInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_repository", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ServiceRepository.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *IDLWithInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("main_idl_path", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MainIdlPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *IDLWithInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("commit_hash", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CommitHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *IDLWithInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("import_idls", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ImportIdls)); err != nil {
		return err
	}
	for _, v := range p.ImportIdls {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *IDLWithInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_name", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *IDLWithInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("template_id", thrift.I64, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TemplateId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *IDLWithInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("template", thrift.STRUCT, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Template.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *IDLWithInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *IDLWithInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_sync_time", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastSyncTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *IDLWithInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_deleted", thrift.BOOL, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsDeleted); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *IDLWithInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("create_time", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *IDLWithInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("update_time", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *IDLWithInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IDLWithInfo(%+v)", *p)
}

func (p *IDLWithInfo) DeepEqual(ano *IDLWithInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.IdlRepositoryId) {
		return false
	}
	if !p.Field3DeepEqual(ano.IdlRepository) {
		return false
	}
	if !p.Field4DeepEqual(ano.ServiceRepositoryId) {
		return false
	}
	if !p.Field5DeepEqual(ano.ServiceRepository) {
		return false
	}
	if !p.Field6DeepEqual(ano.MainIdlPath) {
		return false
	}
	if !p.Field7DeepEqual(ano.CommitHash) {
		return false
	}
	if !p.Field8DeepEqual(ano.ImportIdls) {
		return false
	}
	if !p.Field9DeepEqual(ano.ServiceName) {
		return false
	}
	if !p.Field10DeepEqual(ano.TemplateId) {
		return false
	}
	if !p.Field11DeepEqual(ano.Template) {
		return false
	}
	if !p.Field12DeepEqual(ano.Status) {
		return false
	}
	if !p.Field13DeepEqual(ano.LastSyncTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.IsDeleted) {
		return false
	}
	if !p.Field15DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field16DeepEqual(ano.UpdateTime) {
		return false
	}
	return true
}

func (p *IDLWithInfo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field2DeepEqual(src int64) bool {

	if p.IdlRepositoryId != src {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field3DeepEqual(src *Repository) bool {

	if !p.IdlRepository.DeepEqual(src) {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field4DeepEqual(src int64) bool {

	if p.ServiceRepositoryId != src {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field5DeepEqual(src *Repository) bool {

	if !p.ServiceRepository.DeepEqual(src) {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.MainIdlPath, src) != 0 {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CommitHash, src) != 0 {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field8DeepEqual(src []*ImportIDL) bool {

	if len(p.ImportIdls) != len(src) {
		return false
	}
	for i, v := range p.ImportIdls {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *IDLWithInfo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.ServiceName, src) != 0 {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field10DeepEqual(src int64) bool {

	if p.TemplateId != src {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field11DeepEqual(src *Template) bool {

	if !p.Template.DeepEqual(src) {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field12DeepEqual(src int32) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field13DeepEqual(src string) bool {

	if strings.Compare(p.LastSyncTime, src) != 0 {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field14DeepEqual(src bool) bool {

	if p.IsDeleted != src {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field15DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *IDLWithInfo) Field16DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
