// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package model

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type TaskType int64

const (
	TaskType_Sync TaskType = 1
)

func (p TaskType) String() string {
	switch p {
	case TaskType_Sync:
		return "Sync"
	}
	return "<UNSET>"
}

func TaskTypeFromString(s string) (TaskType, error) {
	switch s {
	case "Sync":
		return TaskType_Sync, nil
	}
	return TaskType(0), fmt.Errorf("not a valid TaskType string")
}

func TaskTypePtr(v TaskType) *TaskType { return &v }
func (p *TaskType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TaskType(result.Int64)
	return
}

func (p *TaskType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Task struct {
	ID           string   `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
	Type         TaskType `thrift:"Type,2" frugal:"2,default,TaskType" json:"Type"`
	ScheduleTime string   `thrift:"ScheduleTime,3" frugal:"3,default,string" json:"ScheduleTime"`
	IdlID        int64    `thrift:"IdlID,4" frugal:"4,default,i64" json:"IdlID"`
}

func NewTask() *Task {
	return &Task{}
}

func (p *Task) InitDefault() {
	*p = Task{}
}

func (p *Task) GetID() (v string) {
	return p.ID
}

func (p *Task) GetType() (v TaskType) {
	return p.Type
}

func (p *Task) GetScheduleTime() (v string) {
	return p.ScheduleTime
}

func (p *Task) GetIdlID() (v int64) {
	return p.IdlID
}
func (p *Task) SetID(val string) {
	p.ID = val
}
func (p *Task) SetType(val TaskType) {
	p.Type = val
}
func (p *Task) SetScheduleTime(val string) {
	p.ScheduleTime = val
}
func (p *Task) SetIdlID(val int64) {
	p.IdlID = val
}

func (p *Task) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Task(%+v)", *p)
}
