// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package agent

import (
	"fmt"
	"github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/model"
)

type AddTokenReq struct {
	RepositoryType   int32  `thrift:"repository_type,1" frugal:"1,default,i32" json:"repository_type"`
	RepositoryDomain string `thrift:"repository_domain,2" frugal:"2,default,string" json:"repository_domain"`
	Token            string `thrift:"token,3" frugal:"3,default,string" json:"token"`
}

func NewAddTokenReq() *AddTokenReq {
	return &AddTokenReq{}
}

func (p *AddTokenReq) InitDefault() {
	*p = AddTokenReq{}
}

func (p *AddTokenReq) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *AddTokenReq) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *AddTokenReq) GetToken() (v string) {
	return p.Token
}
func (p *AddTokenReq) SetRepositoryType(val int32) {
	p.RepositoryType = val
}
func (p *AddTokenReq) SetRepositoryDomain(val string) {
	p.RepositoryDomain = val
}
func (p *AddTokenReq) SetToken(val string) {
	p.Token = val
}

func (p *AddTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTokenReq(%+v)", *p)
}

type AddTokenResData struct {
	Owner          string `thrift:"owner,1" frugal:"1,default,string" json:"owner"`
	ExpirationTime string `thrift:"expiration_time,2" frugal:"2,default,string" json:"expiration_time"`
}

func NewAddTokenResData() *AddTokenResData {
	return &AddTokenResData{}
}

func (p *AddTokenResData) InitDefault() {
	*p = AddTokenResData{}
}

func (p *AddTokenResData) GetOwner() (v string) {
	return p.Owner
}

func (p *AddTokenResData) GetExpirationTime() (v string) {
	return p.ExpirationTime
}
func (p *AddTokenResData) SetOwner(val string) {
	p.Owner = val
}
func (p *AddTokenResData) SetExpirationTime(val string) {
	p.ExpirationTime = val
}

func (p *AddTokenResData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTokenResData(%+v)", *p)
}

type AddTokenResp struct {
	Code int32            `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string           `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
	Data *AddTokenResData `thrift:"data,3" frugal:"3,default,AddTokenResData" json:"data"`
}

func NewAddTokenResp() *AddTokenResp {
	return &AddTokenResp{}
}

func (p *AddTokenResp) InitDefault() {
	*p = AddTokenResp{}
}

func (p *AddTokenResp) GetCode() (v int32) {
	return p.Code
}

func (p *AddTokenResp) GetMsg() (v string) {
	return p.Msg
}

var AddTokenResp_Data_DEFAULT *AddTokenResData

func (p *AddTokenResp) GetData() (v *AddTokenResData) {
	if !p.IsSetData() {
		return AddTokenResp_Data_DEFAULT
	}
	return p.Data
}
func (p *AddTokenResp) SetCode(val int32) {
	p.Code = val
}
func (p *AddTokenResp) SetMsg(val string) {
	p.Msg = val
}
func (p *AddTokenResp) SetData(val *AddTokenResData) {
	p.Data = val
}

func (p *AddTokenResp) IsSetData() bool {
	return p.Data != nil
}

func (p *AddTokenResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTokenResp(%+v)", *p)
}

type DeleteTokenReq struct {
	Ids []int64 `thrift:"ids,1" frugal:"1,default,list<i64>" json:"ids"`
}

func NewDeleteTokenReq() *DeleteTokenReq {
	return &DeleteTokenReq{}
}

func (p *DeleteTokenReq) InitDefault() {
	*p = DeleteTokenReq{}
}

func (p *DeleteTokenReq) GetIds() (v []int64) {
	return p.Ids
}
func (p *DeleteTokenReq) SetIds(val []int64) {
	p.Ids = val
}

func (p *DeleteTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTokenReq(%+v)", *p)
}

type DeleteTokenResp struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewDeleteTokenResp() *DeleteTokenResp {
	return &DeleteTokenResp{}
}

func (p *DeleteTokenResp) InitDefault() {
	*p = DeleteTokenResp{}
}

func (p *DeleteTokenResp) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteTokenResp) GetMsg() (v string) {
	return p.Msg
}
func (p *DeleteTokenResp) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteTokenResp) SetMsg(val string) {
	p.Msg = val
}

func (p *DeleteTokenResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTokenResp(%+v)", *p)
}

type GetTokenReq struct {
	Page             int32  `thrift:"page,1" frugal:"1,default,i32" json:"page"`
	Limit            int32  `thrift:"limit,2" frugal:"2,default,i32" json:"limit"`
	Order            int32  `thrift:"order,3" frugal:"3,default,i32" json:"order"`
	OrderBy          string `thrift:"order_by,4" frugal:"4,default,string" json:"order_by"`
	Owner            string `thrift:"owner,5" frugal:"5,default,string" json:"owner"`
	RepositoryType   int32  `thrift:"repository_type,6" frugal:"6,default,i32" json:"repository_type"`
	RepositoryDomain string `thrift:"repository_domain,7" frugal:"7,default,string" json:"repository_domain"`
}

func NewGetTokenReq() *GetTokenReq {
	return &GetTokenReq{}
}

func (p *GetTokenReq) InitDefault() {
	*p = GetTokenReq{}
}

func (p *GetTokenReq) GetPage() (v int32) {
	return p.Page
}

func (p *GetTokenReq) GetLimit() (v int32) {
	return p.Limit
}

func (p *GetTokenReq) GetOrder() (v int32) {
	return p.Order
}

func (p *GetTokenReq) GetOrderBy() (v string) {
	return p.OrderBy
}

func (p *GetTokenReq) GetOwner() (v string) {
	return p.Owner
}

func (p *GetTokenReq) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *GetTokenReq) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}
func (p *GetTokenReq) SetPage(val int32) {
	p.Page = val
}
func (p *GetTokenReq) SetLimit(val int32) {
	p.Limit = val
}
func (p *GetTokenReq) SetOrder(val int32) {
	p.Order = val
}
func (p *GetTokenReq) SetOrderBy(val string) {
	p.OrderBy = val
}
func (p *GetTokenReq) SetOwner(val string) {
	p.Owner = val
}
func (p *GetTokenReq) SetRepositoryType(val int32) {
	p.RepositoryType = val
}
func (p *GetTokenReq) SetRepositoryDomain(val string) {
	p.RepositoryDomain = val
}

func (p *GetTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenReq(%+v)", *p)
}

type GetTokenResData struct {
	Tokens []*model.Token `thrift:"tokens,1" frugal:"1,default,list<model.Token>" json:"tokens"`
	Total  int32          `thrift:"total,2" frugal:"2,default,i32" json:"total"`
}

func NewGetTokenResData() *GetTokenResData {
	return &GetTokenResData{}
}

func (p *GetTokenResData) InitDefault() {
	*p = GetTokenResData{}
}

func (p *GetTokenResData) GetTokens() (v []*model.Token) {
	return p.Tokens
}

func (p *GetTokenResData) GetTotal() (v int32) {
	return p.Total
}
func (p *GetTokenResData) SetTokens(val []*model.Token) {
	p.Tokens = val
}
func (p *GetTokenResData) SetTotal(val int32) {
	p.Total = val
}

func (p *GetTokenResData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenResData(%+v)", *p)
}

type GetTokenResp struct {
	Code int32            `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string           `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
	Data *GetTokenResData `thrift:"data,3" frugal:"3,default,GetTokenResData" json:"data"`
}

func NewGetTokenResp() *GetTokenResp {
	return &GetTokenResp{}
}

func (p *GetTokenResp) InitDefault() {
	*p = GetTokenResp{}
}

func (p *GetTokenResp) GetCode() (v int32) {
	return p.Code
}

func (p *GetTokenResp) GetMsg() (v string) {
	return p.Msg
}

var GetTokenResp_Data_DEFAULT *GetTokenResData

func (p *GetTokenResp) GetData() (v *GetTokenResData) {
	if !p.IsSetData() {
		return GetTokenResp_Data_DEFAULT
	}
	return p.Data
}
func (p *GetTokenResp) SetCode(val int32) {
	p.Code = val
}
func (p *GetTokenResp) SetMsg(val string) {
	p.Msg = val
}
func (p *GetTokenResp) SetData(val *GetTokenResData) {
	p.Data = val
}

func (p *GetTokenResp) IsSetData() bool {
	return p.Data != nil
}

func (p *GetTokenResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenResp(%+v)", *p)
}
