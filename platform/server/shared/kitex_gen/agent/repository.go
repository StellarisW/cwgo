// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package agent

import (
	"fmt"
	"github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/model"
)

type AddRepositoryReq struct {
	RepositoryType   int32  `thrift:"repository_type,1" frugal:"1,default,i32" json:"repository_type"`
	RepositoryDomain string `thrift:"repository_domain,2" frugal:"2,default,string" json:"repository_domain"`
	RepositoryOwner  string `thrift:"repository_owner,3" frugal:"3,default,string" json:"repository_owner"`
	RepositoryName   string `thrift:"repository_name,4" frugal:"4,default,string" json:"repository_name"`
	Branch           string `thrift:"branch,5" frugal:"5,default,string" json:"branch"`
	StoreType        int32  `thrift:"store_type,6" frugal:"6,default,i32" json:"store_type"`
}

func NewAddRepositoryReq() *AddRepositoryReq {
	return &AddRepositoryReq{}
}

func (p *AddRepositoryReq) InitDefault() {
	*p = AddRepositoryReq{}
}

func (p *AddRepositoryReq) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *AddRepositoryReq) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *AddRepositoryReq) GetRepositoryOwner() (v string) {
	return p.RepositoryOwner
}

func (p *AddRepositoryReq) GetRepositoryName() (v string) {
	return p.RepositoryName
}

func (p *AddRepositoryReq) GetBranch() (v string) {
	return p.Branch
}

func (p *AddRepositoryReq) GetStoreType() (v int32) {
	return p.StoreType
}
func (p *AddRepositoryReq) SetRepositoryType(val int32) {
	p.RepositoryType = val
}
func (p *AddRepositoryReq) SetRepositoryDomain(val string) {
	p.RepositoryDomain = val
}
func (p *AddRepositoryReq) SetRepositoryOwner(val string) {
	p.RepositoryOwner = val
}
func (p *AddRepositoryReq) SetRepositoryName(val string) {
	p.RepositoryName = val
}
func (p *AddRepositoryReq) SetBranch(val string) {
	p.Branch = val
}
func (p *AddRepositoryReq) SetStoreType(val int32) {
	p.StoreType = val
}

func (p *AddRepositoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddRepositoryReq(%+v)", *p)
}

type AddRepositoryResp struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewAddRepositoryResp() *AddRepositoryResp {
	return &AddRepositoryResp{}
}

func (p *AddRepositoryResp) InitDefault() {
	*p = AddRepositoryResp{}
}

func (p *AddRepositoryResp) GetCode() (v int32) {
	return p.Code
}

func (p *AddRepositoryResp) GetMsg() (v string) {
	return p.Msg
}
func (p *AddRepositoryResp) SetCode(val int32) {
	p.Code = val
}
func (p *AddRepositoryResp) SetMsg(val string) {
	p.Msg = val
}

func (p *AddRepositoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddRepositoryResp(%+v)", *p)
}

type DeleteRepositoriesReq struct {
	Ids []int64 `thrift:"ids,1" frugal:"1,default,list<i64>" json:"ids"`
}

func NewDeleteRepositoriesReq() *DeleteRepositoriesReq {
	return &DeleteRepositoriesReq{}
}

func (p *DeleteRepositoriesReq) InitDefault() {
	*p = DeleteRepositoriesReq{}
}

func (p *DeleteRepositoriesReq) GetIds() (v []int64) {
	return p.Ids
}
func (p *DeleteRepositoriesReq) SetIds(val []int64) {
	p.Ids = val
}

func (p *DeleteRepositoriesReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRepositoriesReq(%+v)", *p)
}

type DeleteRepositoriesResp struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewDeleteRepositoriesResp() *DeleteRepositoriesResp {
	return &DeleteRepositoriesResp{}
}

func (p *DeleteRepositoriesResp) InitDefault() {
	*p = DeleteRepositoriesResp{}
}

func (p *DeleteRepositoriesResp) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteRepositoriesResp) GetMsg() (v string) {
	return p.Msg
}
func (p *DeleteRepositoriesResp) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteRepositoriesResp) SetMsg(val string) {
	p.Msg = val
}

func (p *DeleteRepositoriesResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRepositoriesResp(%+v)", *p)
}

type UpdateRepositoryReq struct {
	Id     int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Branch string `thrift:"branch,2" frugal:"2,default,string" json:"branch"`
	Status int32  `thrift:"status,3" frugal:"3,default,i32" json:"status"`
}

func NewUpdateRepositoryReq() *UpdateRepositoryReq {
	return &UpdateRepositoryReq{}
}

func (p *UpdateRepositoryReq) InitDefault() {
	*p = UpdateRepositoryReq{}
}

func (p *UpdateRepositoryReq) GetId() (v int64) {
	return p.Id
}

func (p *UpdateRepositoryReq) GetBranch() (v string) {
	return p.Branch
}

func (p *UpdateRepositoryReq) GetStatus() (v int32) {
	return p.Status
}
func (p *UpdateRepositoryReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdateRepositoryReq) SetBranch(val string) {
	p.Branch = val
}
func (p *UpdateRepositoryReq) SetStatus(val int32) {
	p.Status = val
}

func (p *UpdateRepositoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRepositoryReq(%+v)", *p)
}

type UpdateRepositoryResp struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewUpdateRepositoryResp() *UpdateRepositoryResp {
	return &UpdateRepositoryResp{}
}

func (p *UpdateRepositoryResp) InitDefault() {
	*p = UpdateRepositoryResp{}
}

func (p *UpdateRepositoryResp) GetCode() (v int32) {
	return p.Code
}

func (p *UpdateRepositoryResp) GetMsg() (v string) {
	return p.Msg
}
func (p *UpdateRepositoryResp) SetCode(val int32) {
	p.Code = val
}
func (p *UpdateRepositoryResp) SetMsg(val string) {
	p.Msg = val
}

func (p *UpdateRepositoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRepositoryResp(%+v)", *p)
}

type GetRepositoriesReq struct {
	Page             int32  `thrift:"page,1" frugal:"1,default,i32" json:"page"`
	Limit            int32  `thrift:"limit,2" frugal:"2,default,i32" json:"limit"`
	Order            int32  `thrift:"order,3" frugal:"3,default,i32" json:"order"`
	OrderBy          string `thrift:"order_by,4" frugal:"4,default,string" json:"order_by"`
	RepositoryType   int32  `thrift:"repository_type,5" frugal:"5,default,i32" json:"repository_type"`
	StoreType        int32  `thrift:"store_type,6" frugal:"6,default,i32" json:"store_type"`
	RepositoryDomain string `thrift:"repository_domain,7" frugal:"7,default,string" json:"repository_domain"`
	RepositoryOwner  string `thrift:"repository_owner,8" frugal:"8,default,string" json:"repository_owner"`
	RepositoryName   string `thrift:"repository_name,9" frugal:"9,default,string" json:"repository_name"`
}

func NewGetRepositoriesReq() *GetRepositoriesReq {
	return &GetRepositoriesReq{}
}

func (p *GetRepositoriesReq) InitDefault() {
	*p = GetRepositoriesReq{}
}

func (p *GetRepositoriesReq) GetPage() (v int32) {
	return p.Page
}

func (p *GetRepositoriesReq) GetLimit() (v int32) {
	return p.Limit
}

func (p *GetRepositoriesReq) GetOrder() (v int32) {
	return p.Order
}

func (p *GetRepositoriesReq) GetOrderBy() (v string) {
	return p.OrderBy
}

func (p *GetRepositoriesReq) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *GetRepositoriesReq) GetStoreType() (v int32) {
	return p.StoreType
}

func (p *GetRepositoriesReq) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *GetRepositoriesReq) GetRepositoryOwner() (v string) {
	return p.RepositoryOwner
}

func (p *GetRepositoriesReq) GetRepositoryName() (v string) {
	return p.RepositoryName
}
func (p *GetRepositoriesReq) SetPage(val int32) {
	p.Page = val
}
func (p *GetRepositoriesReq) SetLimit(val int32) {
	p.Limit = val
}
func (p *GetRepositoriesReq) SetOrder(val int32) {
	p.Order = val
}
func (p *GetRepositoriesReq) SetOrderBy(val string) {
	p.OrderBy = val
}
func (p *GetRepositoriesReq) SetRepositoryType(val int32) {
	p.RepositoryType = val
}
func (p *GetRepositoriesReq) SetStoreType(val int32) {
	p.StoreType = val
}
func (p *GetRepositoriesReq) SetRepositoryDomain(val string) {
	p.RepositoryDomain = val
}
func (p *GetRepositoriesReq) SetRepositoryOwner(val string) {
	p.RepositoryOwner = val
}
func (p *GetRepositoriesReq) SetRepositoryName(val string) {
	p.RepositoryName = val
}

func (p *GetRepositoriesReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRepositoriesReq(%+v)", *p)
}

type GetRepositoriesResp struct {
	Code int32                    `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Msg  string                   `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
	Data *GetRepositoriesRespData `thrift:"data,3" frugal:"3,default,GetRepositoriesRespData" json:"data"`
}

func NewGetRepositoriesResp() *GetRepositoriesResp {
	return &GetRepositoriesResp{}
}

func (p *GetRepositoriesResp) InitDefault() {
	*p = GetRepositoriesResp{}
}

func (p *GetRepositoriesResp) GetCode() (v int32) {
	return p.Code
}

func (p *GetRepositoriesResp) GetMsg() (v string) {
	return p.Msg
}

var GetRepositoriesResp_Data_DEFAULT *GetRepositoriesRespData

func (p *GetRepositoriesResp) GetData() (v *GetRepositoriesRespData) {
	if !p.IsSetData() {
		return GetRepositoriesResp_Data_DEFAULT
	}
	return p.Data
}
func (p *GetRepositoriesResp) SetCode(val int32) {
	p.Code = val
}
func (p *GetRepositoriesResp) SetMsg(val string) {
	p.Msg = val
}
func (p *GetRepositoriesResp) SetData(val *GetRepositoriesRespData) {
	p.Data = val
}

func (p *GetRepositoriesResp) IsSetData() bool {
	return p.Data != nil
}

func (p *GetRepositoriesResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRepositoriesResp(%+v)", *p)
}

type GetRepositoriesRespData struct {
	Repositories []*model.Repository `thrift:"repositories,1" frugal:"1,default,list<model.Repository>" json:"repositories"`
	Total        int32               `thrift:"total,2" frugal:"2,default,i32" json:"total"`
}

func NewGetRepositoriesRespData() *GetRepositoriesRespData {
	return &GetRepositoriesRespData{}
}

func (p *GetRepositoriesRespData) InitDefault() {
	*p = GetRepositoriesRespData{}
}

func (p *GetRepositoriesRespData) GetRepositories() (v []*model.Repository) {
	return p.Repositories
}

func (p *GetRepositoriesRespData) GetTotal() (v int32) {
	return p.Total
}
func (p *GetRepositoriesRespData) SetRepositories(val []*model.Repository) {
	p.Repositories = val
}
func (p *GetRepositoriesRespData) SetTotal(val int32) {
	p.Total = val
}

func (p *GetRepositoriesRespData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRepositoriesRespData(%+v)", *p)
}
